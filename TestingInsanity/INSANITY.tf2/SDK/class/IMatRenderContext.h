#pragma once

#include "Basic Structures.h"

class IMatRenderContext
{
public:
    virtual void AddRef() = 0;
    virtual void Release() = 0;
	virtual void				BeginRender() = 0;
	virtual void				EndRender() = 0;
	virtual void				Flush(bool flushHardware = false) = 0;
	virtual void				BindLocalCubemap(void* pTexture) = 0;
	virtual void				SetRenderTarget(void* pTexture) = 0;
	virtual void* GetRenderTarget(void) = 0;
	virtual void				GetRenderTargetDimensions(int& width, int& height) const = 0;
	virtual void				Bind(IMaterial* material, void* proxyData = 0) = 0;
	virtual void				BindLightmapPage(int lightmapPageID) = 0;
	virtual void				DepthRange(float zNear, float zFar) = 0;
	virtual void				ClearBuffers(int bClearColor, int bClearDepth, int bClearStencil = 0) = 0;
	virtual void				ReadPixels(int x, int y, int width, int height, unsigned char* data, int dstFormat) = 0;
	virtual void				SetAmbientLight(float r, float g, float b) = 0;
	virtual void				SetLight(int lightNum, const int& desc) = 0;
	virtual void				SetAmbientLightCube(int cube[6]) = 0;
	virtual void				CopyRenderTargetToTexture(void* pTexture) = 0;
	virtual void				SetFrameBufferCopyTexture(void* pTexture, int textureIndex = 0) = 0;
	virtual void* GetFrameBufferCopyTexture(int textureIndex) = 0;
	virtual void				MatrixMode(int matrixMode) = 0;
	virtual void				PushMatrix(void) = 0;
	virtual void				PopMatrix(void) = 0;
	virtual void				LoadMatrix(int const& matrix) = 0;
	virtual void				LoadMatrix(matrix3x4_t const& matrix) = 0;
	virtual void				MultMatrix(int const& matrix) = 0;
	virtual void				MultMatrix(matrix3x4_t const& matrix) = 0;
	virtual void				MultMatrixLocal(int const& matrix) = 0;
	virtual void				MultMatrixLocal(matrix3x4_t const& matrix) = 0;
	virtual void				GetMatrix(int matrixMode, int* matrix) = 0;
	virtual void				GetMatrix(int matrixMode, matrix3x4_t* matrix) = 0;
	virtual void				LoadIdentity(void) = 0;
	virtual void				Ortho(double left, double top, double right, double bottom, double zNear, double zFar) = 0;
	virtual void				PerspectiveX(double fovx, double aspect, double zNear, double zFar) = 0;
	virtual void				PickMatrix(int x, int y, int width, int height) = 0;
	virtual void				Rotate(float angle, float x, float y, float z) = 0;
	virtual void				Translate(float x, float y, float z) = 0;
	virtual void				Scale(float x, float y, float z) = 0;
	virtual void				Viewport(int x, int y, int width, int height) = 0;
	virtual void				GetViewport(int& x, int& y, int& width, int& height) const = 0;
	virtual void				CullMode(int cullMode) = 0;
	virtual void				SetHeightClipMode(int nHeightClipMode) = 0;
	virtual void				SetHeightClipZ(float z) = 0;
	virtual void				FogMode(int fogMode) = 0;
	virtual void				FogStart(float fStart) = 0;
	virtual void				FogEnd(float fEnd) = 0;
	virtual void				SetFogZ(float fogZ) = 0;
	virtual int	GetFogMode(void) = 0;
	virtual void				FogColor3f(float r, float g, float b) = 0;
	virtual void				FogColor3fv(float const* rgb) = 0;
	virtual void				FogColor3ub(unsigned char r, unsigned char g, unsigned char b) = 0;
	virtual void				FogColor3ubv(unsigned char const* rgb) = 0;
	virtual void				GetFogColor(unsigned char* rgb) = 0;
	virtual void				SetNumBoneWeights(int numBones) = 0;
	virtual void* CreateStaticMesh(int fmt, const char* pTextureBudgetGroup, IMaterial* pMaterial = NULL) = 0;
	virtual void DestroyStaticMesh(void* mesh) = 0;
	virtual void* GetDynamicMesh(bool buffered = true, void* pVertexOverride = 0, void* pIndexOverride = 0, IMaterial* pAutoBind = 0) = 0;
	virtual int* CreateStaticVertexBuffer(int fmt, int nVertexCount, const char* pTextureBudgetGroup) = 0;
	virtual int* CreateStaticIndexBuffer(int fmt, int nIndexCount, const char* pTextureBudgetGroup) = 0;
	virtual void DestroyVertexBuffer(int*) = 0;
	virtual void DestroyIndexBuffer(int*) = 0;
	virtual int* GetDynamicVertexBuffer(int streamID, int vertexFormat, bool bBuffered = true) = 0;
	virtual int* GetDynamicIndexBuffer(int fmt, bool bBuffered = true) = 0;
	virtual void BindVertexBuffer(int streamID, int* pVertexBuffer, int nOffsetInBytes, int nFirstVertex, int nVertexCount, int fmt, int nRepetitions = 1) = 0;
	virtual void BindIndexBuffer(int* pIndexBuffer, int nOffsetInBytes) = 0;
	virtual void Draw(int primitiveType, int firstIndex, int numIndices) = 0;
	virtual int  SelectionMode(bool selectionMode) = 0;
	virtual void SelectionBuffer(unsigned int* pBuffer, int size) = 0;
	virtual void ClearSelectionNames() = 0;
	virtual void LoadSelectionName(int name) = 0;
	virtual void PushSelectionName(int name) = 0;
	virtual void PopSelectionName() = 0;
	virtual void	OverrideDepthEnable(bool bEnable, bool bDepthEnable) = 0;
	virtual void		ClearColor4ub(unsigned char r, unsigned char g, unsigned char b, unsigned char a) = 0; //virtual void	DrawScreenSpaceQuad(IMaterial* pMaterial) = 0;
	virtual void	SyncToken(const char* pToken) = 0;
	virtual float	ComputePixelWidthOfSphere(const vec& origin, float flRadius) = 0;
	virtual void		ClearColor3ub(unsigned char r, unsigned char g, unsigned char b) = 0;
	virtual void		ClearColor4ub_2(unsigned char r, unsigned char g, unsigned char b, unsigned char a) = 0;
	virtual int CreateOcclusionQueryObject(void) = 0;
	virtual void DestroyOcclusionQueryObject(int) = 0;
	virtual void BeginOcclusionQueryDrawing(int) = 0;
	virtual void EndOcclusionQueryDrawing(int) = 0;
	virtual int OcclusionQuery_GetNumPixelsRendered(int) = 0;
	virtual void SetFlashlightMode(bool bEnable) = 0;
	virtual void SetFlashlightState(const int& state, const int& worldToTexture) = 0;
	virtual int GetHeightClipMode() = 0;
	virtual float	ComputePixelDiameterOfSphere(const vec& vecAbsOrigin, float flRadius) = 0;
	virtual void	EnableUserClipTransformOverride(bool bEnable) = 0;
	virtual void	UserClipTransform(const int& worldToView) = 0;
	virtual bool GetFlashlightMode() const = 0;
	virtual void ResetOcclusionQueryObject(int) = 0;
	virtual void Unused3() {}
	virtual int* CreateMorph(unsigned int format, const char* pDebugName) = 0;
	virtual void DestroyMorph(int* pMorph) = 0;
	virtual void BindMorph(int* pMorph) = 0;
	virtual void SetFlexWeights(int nFirstWeight, int nCount, const int* pWeights) = 0;
	virtual void Unused4() {};
	virtual void Unused5() {};
	virtual void Unused6() {};
	virtual void Unused7() {};
	virtual void Unused8() {}; // extra.
	virtual void ReadPixelsAndStretch(void* pSrcRect, void* pDstRect, unsigned char* pBuffer, int dstFormat, int nDstStride) = 0;
	virtual void GetWindowSize(int& width, int& height) const = 0;
	virtual void DrawScreenSpaceRectangle(IMaterial* pMaterial, int destx, int desty, int width, int height, float src_texture_x0, float src_texture_y0, float src_texture_x1, float src_texture_y1, int src_texture_width, int src_texture_height, void* pClientRenderable = NULL, int nXDice = 1, int nYDice = 1) = 0;
	virtual void LoadBoneMatrix(int boneIndex, const matrix3x4_t& matrix) = 0;
	virtual void PushRenderTargetAndViewport() = 0;
	virtual void PushRenderTargetAndViewport(void* pTexture) = 0;
	virtual void PushRenderTargetAndViewport(void* pTexture, int nViewX, int nViewY, int nViewW, int nViewH) = 0;
	virtual void PushRenderTargetAndViewport(void* pTexture, void* pDepthTexture, int nViewX, int nViewY, int nViewW, int nViewH) = 0;
	virtual void PopRenderTargetAndViewport(void) = 0;
	virtual void BindLightmapTexture(void* pLightmapTexture) = 0;
	virtual void CopyRenderTargetToTextureEx(void* pTexture, int nRenderTargetID, void* pSrcRect, void* pDstRect = NULL) = 0;
	virtual void CopyTextureToRenderTargetEx(int nRenderTargetID, void* pTexture, void* pSrcRect, void* pDstRect = NULL) = 0;
	virtual void PerspectiveOffCenterX(double fovx, double aspect, double zNear, double zFar, double bottom, double top, double left, double right) = 0;
	virtual void SetFloatRenderingParameter(int parm_number, float value) = 0;
	virtual void SetIntRenderingParameter(int parm_number, int value) = 0;
	virtual void SetvecRenderingParameter(int parm_number, vec const& value) = 0;
	virtual void SetStencilEnable(bool onoff) = 0;
	virtual void SetStencilFailOperation(int op) = 0;
	virtual void SetStencilZFailOperation(int op) = 0;
	virtual void SetStencilPassOperation(int op) = 0;
	virtual void SetStencilCompareFunction(int cmpfn) = 0;
	virtual void SetStencilReferenceValue(int ref) = 0;
	virtual void SetStencilTestMask(unsigned int msk) = 0;
	virtual void SetStencilWriteMask(unsigned int msk) = 0;
	virtual void ClearStencilBufferRectangle(int xmin, int ymin, int xmax, int ymax, int value) = 0;
	virtual void SetRenderTargetEx(int nRenderTargetID, void* pTexture) = 0;
	virtual void PushCustomClipPlane(const float* pPlane) = 0;
	virtual void PopCustomClipPlane(void) = 0;
	virtual void GetMaxToRender(void* pMesh, bool bMaxUntilFlush, int* pMaxVerts, int* pMaxIndices) = 0;
	virtual int GetMaxVerticesToRender(IMaterial* pMaterial) = 0;
	virtual int GetMaxIndicesToRender() = 0;
	virtual void DisableAllLocalLights() = 0;
	virtual int CompareMaterialCombos(IMaterial* pMaterial1, IMaterial* pMaterial2, int lightMapID1, int lightMapID2) = 0;
	virtual void* GetFlexMesh() = 0;
	virtual void SetFlashlightStateEx(const int& state, const int& worldToTexture, void* pFlashlightDepthTexture) = 0;
	virtual void* GetLocalCubemap() = 0;
	virtual void ClearBuffersObeyStencil(bool bClearColor, bool bClearDepth) = 0;
	virtual bool EnableClipping(bool bEnable) = 0;
	virtual void GetFogDistances(float* fStart, float* fEnd, float* fFogZ) = 0;
	virtual void BeginPIXEvent(unsigned long color, const char* szName) = 0;
	virtual void EndPIXEvent() = 0;
	virtual void SetPIXMarker(unsigned long color, const char* szName) = 0;
	virtual void BeginBatch(void* pIndices) = 0;
	virtual void BindBatch(void* pVertices, IMaterial* pAutoBind = NULL) = 0;
	virtual void DrawBatch(int firstIndex, int numIndices) = 0;
	virtual void EndBatch() = 0;
	virtual void* GetCallQueue() = 0;
	virtual void GetWorldSpaceCameraPosition(vec* pCameraPos) = 0;
	virtual void GetWorldSpaceCameravecs(vec* pVecForward, vec* pVecRight, vec* pVecUp) = 0;
	virtual void				ResetToneMappingScale(float monoscale) = 0; 			// set scale to monoscale instantly with no chasing
	virtual void				SetGoalToneMappingScale(float monoscale) = 0; 			// set scale to monoscale instantly with no chasing
	virtual void				TurnOnToneMapping() = 0;
	virtual void				SetToneMappingScaleLinear(const vec& scale) = 0;
	virtual vec				GetToneMappingScaleLinear(void) = 0;
	virtual void				SetShadowDepthBiasFactors(float fSlopeScaleDepthBias, float fDepthBias) = 0;
	virtual void				PerformFullScreenStencilOperation(void) = 0;
	virtual void				SetLightingOrigin(vec* vLightingOrigin) = 0;																		//158
	virtual void				SetScissorRect(const int nLeft, const int nTop, const int nRight, const int nBottom, const bool bEnableScissor) = 0;
	virtual void				BeginMorphAccumulation() = 0;
	virtual void				EndMorphAccumulation() = 0;
	virtual void				AccumulateMorph(int* pMorph, int nMorphCount, const int* pWeights) = 0;
	virtual void				PushDeformation(int const* Deformation) = 0;
	virtual void				PopDeformation() = 0;
	virtual int					GetNumActiveDeformations() const = 0;
	virtual bool				GetMorphAccumulatorTexCoord(void* pTexCoord, int* pMorph, int nVertex) = 0;
	virtual void* GetDynamicMeshEx(int vertexFormat, bool bBuffered = true, void* pVertexOverride = 0, void* pIndexOverride = 0, IMaterial* pAutoBind = 0) = 0;
	virtual void				FogMaxDensity(float flMaxDensity) = 0;
	virtual IMaterial* GetCurrentMaterial() = 0;
	virtual int  GetCurrentNumBones() const = 0;
	virtual void* GetCurrentProxy() = 0;
	virtual void EnableColorCorrection(bool bEnable) = 0;
	virtual int AddLookup(const char* pName) = 0;
	virtual bool RemoveLookup(int handle) = 0;
	virtual void LockLookup(int handle) = 0;
	virtual void LoadLookup(int handle, const char* pLookupName) = 0;
	virtual void UnlockLookup(int handle) = 0;
	virtual void SetLookupWeight(int handle, float flWeight) = 0;
	virtual void ResetLookupWeights() = 0;
	virtual void SetResetable(int handle, bool bResetable) = 0;
	virtual void SetFullScreenDepthTextureValidityFlag(bool bIsValid) = 0;
	virtual void SetNonInteractivePacifierTexture(void* pTexture, float flNormalizedX, float flNormalizedY, float flNormalizedSize) = 0;
	virtual void SetNonInteractiveTempFullscreenBuffer(void* pTexture, int mode) = 0;
	virtual void EnableNonInteractiveMode(int mode) = 0;
	virtual void RefreshFrontBufferNonInteractive() = 0;
	virtual void* LockRenderData(int nSizeInBytes) = 0;
	virtual void			UnlockRenderData(void* pData) = 0;
	virtual void			AddRefRenderData() = 0;
	virtual void			ReleaseRenderData() = 0;
	virtual bool			IsRenderData(const void* pData) const = 0;
	virtual void			PrintfVA(char* fmt, va_list vargs) = 0;
	virtual void			Printf(const char* fmt, ...) = 0;
};