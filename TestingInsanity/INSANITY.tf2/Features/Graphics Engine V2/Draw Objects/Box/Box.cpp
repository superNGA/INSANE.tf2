#include "Box.h"

#include "../../Graphics.h"


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
BoxFilled_t::BoxFilled_t()
{
    F::graphics.RegisterInTraingleList(this);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
unsigned int BoxFilled_t::GetVertexCount() const
{
    return 6;
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void BoxFilled_t::SetBlur(const int iBlur)
{
    for(int i = 0; i < 6; i++)
        m_vertex[i].m_flBlurAmmount = static_cast<float>(iBlur);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void BoxFilled_t::SetAs2DObject(bool bIs2D)
{
    for(int i = 0; i < 6; i++)
        m_vertex[i].m_flStrictly2D = (bIs2D == true ? 1.0f : 0.0f);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
const Vertex* BoxFilled_t::GetVertexData() const
{
    return m_vertex;
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void BoxFilled_t::SetColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
{
    for (int i = 0; i < 6; i++)
        m_vertex[i].m_clr.Set(r, g, b, a);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void BoxFilled_t::InvertColors()
{
    for (int i = 0; i < 6; i++)
        m_vertex[i].m_flInvertColors = (m_vertex[i].m_flInvertColors == 0.0f ? 1.0f : 0.0f);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void BoxFilled_t::SetPoints(const vec& vMin, const vec& vMax)
{
    m_vertex[0].m_vPos = vMin;
    m_vertex[1].m_vPos = vec(vMin.x, vMin.y, vMax.z);
    m_vertex[2].m_vPos = vec(vMin.x, vMin.y, vMax.z);
    m_vertex[3].m_vPos = m_vertex[2].m_vPos;
    m_vertex[4].m_vPos = m_vertex[1].m_vPos;
    m_vertex[5].m_vPos = vMax;
}