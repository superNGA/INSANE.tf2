#include "Line.h"


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
ILine_t::ILine_t()
{
    F::graphics.RegisterInLineList(this);
    InitRelativeUV();
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
unsigned int ILine_t::GetVertexCount() const
{
    return 2;
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void ILine_t::SetBlur(const int iBlur)
{
    for (int i = 0; i < GetVertexCount(); i++)
        m_vertex[i].m_flBlurAmmount = static_cast<float>(iBlur);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
const Vertex* ILine_t::GetVertexData() const
{
    return m_vertex;
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void ILine_t::SetColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
{
    for (int i = 0; i < GetVertexCount(); i++)
        m_vertex[i].m_clr.Set(r, g, b, a);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void ILine_t::InvertColors(bool bInvert)
{
    for (int i = 0; i < GetVertexCount(); i++)
        m_vertex[i].m_flInvertColors = (bInvert == true ? FLOAT_TRUE : FLOAT_FALSE);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void ILine_t::SetPoints(const vec& vMin, const vec& vMax)
{
    m_vertex[0].m_vPos = vMin;
    m_vertex[1].m_vPos = vMax;
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void ILine_t::SetColor(RGBA_t clr, int vertex)
{
    vertex = std::clamp<int>(vertex, 0, GetVertexCount() - 1);
    m_vertex[vertex].m_clr.Set(clr.r, clr.g, clr.b, clr.a);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void ILine_t::SetRGBAnimSpeed(const float flAnimSpeed)
{
    for (int i = 0; i < GetVertexCount(); i++)
        m_vertex[i].m_flRGBAnimSpeed = flAnimSpeed;
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void ILine_t::InitRelativeUV()
{
    m_vertex[0].m_vRelativeUV = vec(0.0f, 0.0f, 0.0f);
    m_vertex[1].m_vRelativeUV = vec(1.0f, 1.0f, 1.0f);
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void Line2D_t::InitDimension()
{
    m_bIs3D = false;

    for (int i = 0; i < GetVertexCount(); i++)
        m_vertex[i].m_flStrictly2D = FLOAT_TRUE;
}


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
void Line3D_t::InitDimension()
{
    m_bIs3D = true;

    for (int i = 0; i < GetVertexCount(); i++)
        m_vertex[i].m_flStrictly2D = FLOAT_FALSE;
}
